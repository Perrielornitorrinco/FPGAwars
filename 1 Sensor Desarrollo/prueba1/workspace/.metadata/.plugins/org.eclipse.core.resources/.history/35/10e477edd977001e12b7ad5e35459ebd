/***************************** Include Files *********************************/
#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"	/* XPAR parameters */
#include "xspi.h"
#include "sleep.h"

#define SPI_DEVICE_ID		XPAR_AXI_QUAD_SPI_0_DEVICE_ID
#define BUFFER_SIZE		2

typedef u8 DataBuffer[BUFFER_SIZE];

int SpiPolledExample(XSpi *SpiInstancePtr, u16 SpiDeviceId);

static XSpi  SpiInstance;	 /* The instance of the SPI device */

u8 ReadBuffer[BUFFER_SIZE];
u8 WriteBuffer[BUFFER_SIZE];


int main(void)
{
	init_platform();
	int Status;

	Status = SpiPolledExample(&SpiInstance, SPI_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	cleanup_platform();
	return 0;
}

int SpiPolledExample(XSpi *SpiInstancePtr, u16 SpiDeviceId)
{
	init_platform();

	int Status;

	XSpi_Config *ConfigPtr;	/* Pointer to Configuration data */

	ConfigPtr = XSpi_LookupConfig(SpiDeviceId);
	if (ConfigPtr == NULL) {
		return XST_DEVICE_NOT_FOUND;
	}

	Status = XSpi_CfgInitialize(SpiInstancePtr, ConfigPtr,
				  ConfigPtr->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}


	Status = XSpi_SetOptions(SpiInstancePtr, XSP_MASTER_OPTION | XSP_MANUAL_SSELECT_OPTION);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	XSpi_Start(SpiInstancePtr);

	XSpi_IntrGlobalDisable(SpiInstancePtr);
	xil_printf("%d",XSpi_GetStatusReg(SpiInstancePtr));


	u8  WriteBuffer[BUFFER_SIZE]={0x00,0x00};
	u8  ReadBuffer[BUFFER_SIZE]={0x00,0x00};
	u16 temp;
	XSpi_SetSlaveSelect(SpiInstancePtr, 0x01);

	while(1)
  	{
		XSpi_Transfer(SpiInstancePtr, WriteBuffer, ReadBuffer, BUFFER_SIZE);
		temp = (ReadBuffer[0]*256+ReadBuffer[1])/2;
		xil_printf("%d\r\n", temp);
	}

	print("\n success");
	return XST_SUCCESS;
}
